
def docker_image_ub = 'ubuntu:20.04'
def docker_image_c74 = 'centos:7.4.1708'
def docker_args = '-e "BUILD_TYPE=debug" -e "build_type=debug"'

def mail_list = 'user1@example.com, user2@example.com'

def server = Artifactory.server 'example-artifactory-server'

def uploadSpec = '''
{
    "files": [{
        "pattern": "Upload/*.tar.gz",
        "target": "file/2/path/${JOB_BASE_NAME}/${BUILD_ID}/",
        "props": "retention.days=730",
        "recursive": "true"
    }]
}
'''

// Declarative Pipeline
pipeline {
    /* agent { node 'windows-node' } */
    agent { label 'linux-label' }

    environment {
        CC = 'clang'
    }

    stages {
        stage('Windows build') {
            agent {
                node {
                    label 'windows-label'
                    customWorkspace "C:\\Users\\user1\\Documents"
                }
            }

            /* agent { label 'windows-label' } */

            steps {
                powershell 'pwd'
                powershell 'dir'
                bat "echo %CC%"

                script {
                    try {
                        bat 'pwd'
                    } catch(exc) {
                        echo 'pwd failed !'
                    } finally {
                        echo 'finally block'
                    }
                }
            }
        }

        stage('Linux build') {
            agent {
                node {
                    label 'linux-label'
                    customWorkspace "/tmp/${JOB_NAME}"
                }
            }

            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/master']],
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'Github']],
                    userRemoteConfigs: [[credentialsId: 'media-user', url: 'https://github.com/phodal/github.git']]
                ])
                sh 'printenv'
            }
        }

        stage('Parallel build') {
            /* requires "Docker"/"Docker Pipeline" plugin */
            parallel {
                stage('Ubuntu 20.04') {
                    steps {
                        withDockerContainer(args: docker_args, image: docker_image_ub) {
                            sh 'printenv'
                        }
                    }
                }

                stage('CentOS 7.4') {
                    steps {
                        withDockerContainer(args: docker_args, image: docker_image_c74){
                            sh 'printenv'
                        }
                    }
                }

            }
        }

        stage('report') {
            steps {
                sh 'mkdir -p html Upload'
                sh 'ls > html/manifest.html'
                sh 'pwd > html/artifacts.html'
                sh 'date > Upload/data.tar.gz'

                /* requires "HTML Publisher" plugin */
                script {
                    publishHTML (target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'html',
                        reportFiles: 'manifest.html, artifacts.html',
                        reportName: "Summary Report"
                    ])

                    /* requires Artifactory plugin */
                    server.upload(uploadSpec)
                }
            }
        }

    }

    post {
        always {
            script {
                /* requires "build user vars" plugin */
                wrap([$class: 'BuildUser']) {
                    jobUserId = "${BUILD_USER_ID}"
                    jobUserName = "${BUILD_USER}"
                    println("Started By: ${jobUserName} --> ${jobUserId}")
                    /* Timer Trigger --> timer */
                    /* user1 --> user1 */
                }

                /* def TimerCause = currentBuild.rawBuild.getCause(hudson.triggers.TimerTrigger$TimerTriggerCause) */
                /* TimerTriggerCause: hudson.triggers.TimerTrigger$TimerTriggerCause@5 */
                /* TimerTriggerCause: null */

                echo "currentBuild.result: ${currentBuild.result}"
                echo "currentBuild.currentResult: ${currentBuild.currentResult}"
            }
        }

        failure {
            /* requires emailext plugin and needs to configure SMTP server */
            emailext (
                subject: "[${env.JOB_BASE_NAME}][${currentBuild.currentResult}] ${currentBuild.currentResult}",
                to: "${mail_list}",
                body: """
                Build details：'${env.JOB_NAME} [${env.BUILD_NUMBER}]'\nJenkins Link: ${env.BUILD_URL}\nUser: ${jobUserId}
                """
            )
        }

        success {
            emailext (
                subject: "[${env.JOB_BASE_NAME}][${currentBuild.currentResult}] ${currentBuild.currentResult}",
                to: "${mail_list}",
                body: """
                Build details：'${env.JOB_NAME} [${env.BUILD_NUMBER}]'\nJenkins Link: ${env.BUILD_URL}\nUser: ${jobUserId}
                """
            )
        }
    }
}


